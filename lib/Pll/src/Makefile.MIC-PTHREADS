CC = icc 
AR = ar
MICFLAGS = -mmic -std=c99 -D__MIC_NATIVE -opt-streaming-cache-evict=0 # -D_DEBUG_MSG
COMMON_FLAGS = $(MICFLAGS) -c -D_GNU_SOURCE -D_USE_PTHREADS -fomit-frame-pointer -funroll-loops -Wall #-Wredundant-decls  -Wreturn-type  -Wswitch-default -Wimplicit  -Wimplicit-function-declaration  -Wimplicit-int -Wimport -Wunused-label -Wno-int-to-pointer-cast -Wbad-function-cast  -Wmissing-declarations -Wmissing-prototypes  -Wnested-externs  -Wold-style-definition -Wstrict-prototypes -Wpointer-sign -Wextra -Wredundant-decls -Wunused -Wunused-function -Wunused-parameter -Wunused-value  -Wunused-variable -Wformat  -Wformat-nonliteral -Wparentheses -Wsequence-point -Wuninitialized -Wundef -Wbad-function-cast
OPT1_FLAGS = -O1
OPT2_FLAGS = -O2
CFLAGS = $(COMMON_FLAGS) $(OPT2_FLAGS)

ARFLAGS = rvs
TARGET = libpll
ARCH = MIC-PTHREADS
VERSION = 1.0.0
STATICLIB = $(TARGET)-$(ARCH).a.$(VERSION)	# static library
SHAREDOBJ = $(TARGET)-$(ARCH).so.$(VERSION)	# shared object
GLOBAL_DEPS = pll.h globalVariables.h
RM = rm -f

OBJ = hash.o stack.o ssort.o queue.o utils.o optimizeModel.o trash.o searchAlgo.o topologies.o treeIO.o models.o evaluatePartialGenericSpecial.o evaluateGenericSpecial.o newviewGenericSpecial.o makenewzGenericSpecial.o bipartitionList.o restartHashTable.o mic_native_dna.o mic_native_aa.o fastDNAparsimony.o randomTree.o lexer.o recom.o genericParallelization.o alignment.o newick.o parsePartition.o


all: $(STATICLIB)

$(STATICLIB) : $(OBJ)
	@echo "==> Building PLL Library ($(STATICLIB))"
	$(AR) $(ARFLAGS) $@ $(OBJ)
	ln -sf $(STATICLIB) $(TARGET)-$(ARCH).a

models.o : models.c $(GLOBAL_DEPS)
	$(CC) $(COMMON_FLAGS) $(OPT1_FLAGS) -c -o models.o models.c

fastDNAparsimony.o : fastDNAparsimony.c $(GLOBAL_DEPS)
genericParallelization.o : genericParallelization.c $(GLOBAL_DEPS)
bipartitionList.o : bipartitionList.c $(GLOBAL_DEPS)
evaluatePartialSpecialGeneric.o : evaluatePartialSpecialGeneric.c $(GLOBAL_DEPS)
optimizeModel.o : optimizeModel.c $(GLOBAL_DEPS)
trash.o : trash.c $(GLOBAL_DEPS)
utils.o : utils.c $(GLOBAL_DEPS)
searchAlgo.o : searchAlgo.c $(GLOBAL_DEPS)
topologies.o : topologies.c $(GLOBAL_DEPS)
treeIO.o : treeIO.c $(GLOBAL_DEPS)
evaluatePartialGenericSpecial.o : evaluatePartialGenericSpecial.c $(GLOBAL_DEPS)
evaluateGenericSpecial.o : evaluateGenericSpecial.c $(GLOBAL_DEPS)
newviewGenericSpecial.o : newviewGenericSpecial.c $(GLOBAL_DEPS)
makenewzGenericSpecial.o : makenewzGenericSpecial.c $(GLOBAL_DEPS)
randomTree.o : randomTree.c $(GLOBAL_DEPS)
restartHashTable.o : restartHashTable.c $(GLOBAL_DEPS)
recom.o : recom.c  $(GLOBAL_DEPS)
queue.o : queue.c  $(GLOBAL_DEPS)
stack.o : stack.c $(GLOBAL_DEPS)
hash.o : hash.c $(GLOBAL_DEPS)
alignment.o: alignment.c $(GLOBAL_DEPS)
newick.o: newick.c $(GLOBAL_DEPS)
parsePartition.o: parsePartition.c $(GLOBAL_DEPS)
ssort.o : ssort.c $(GLOBAL_DEPS)
mic_native_dna.o : mic_native_dna.c $(GLOBAL_DEPS)
mic_native_aa.o : mic_native_aa.c $(GLOBAL_DEPS)

clean : 
	-$(RM) *.o $(STATICLIB) $(SHAREDOBJ)

.PHONY: all clean
.INTERMEDIATE: $(OBJ)
